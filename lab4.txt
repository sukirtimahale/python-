1. Print the first 10 natural numbers using for loop 

# Program to print the first 10 natural numbers using a for loop
# Natural numbers are positive integers starting from 1 (i.e., 1, 2, 3, ...).
# We will use a for loop to iterate through the numbers from 1 to 10.
# Define the range for the first 10 natural numbers (1 to 10)
# range(1, 11) generates numbers starting from 1 up to (but not including) 11.
for num in range(1, 11):  
    # Print the current number in the loop
    print(num)
# End of the program

--------------------------------------------------------------------------------------------------------------------
2. Python program to check if the given string is a palindrome 

# Program to check if a given string is a palindrome
# A palindrome is a string that reads the same forward and backward,
# e.g., "madam", "racecar", "level".

# Function to check if a string is a palindrome
def is_palindrome(string):
    # Remove any extra spaces and convert the string to lowercase for consistency
    string = string.replace(" ", "").lower()
    
    # Compare the original string with its reverse
    return string == string[::-1]

# Input: Ask the user to enter a string
user_input = input("Enter a string to check if it's a palindrome: ")

# Check if the string is a palindrome and print the result
if is_palindrome(user_input):
    print(f'"{user_input}" is a palindrome.')
else:
    print(f'"{user_input}" is not a palindrome.')

----------------------------------------------------------------------------------------------------------------------------------

3. Python program to check if a given number is an Armstrong number 

# is a number that is equal to the sum of its own digits raised to the power of the number of digits.
# Example: 153 is an Armstrong number (1^3 + 5^3 + 3^3 = 153).

# Function to check if a number is an Armstrong number
def is_armstrong(number):
    # Convert the number to a string to get its digits
    digits = str(number)
    
    # Calculate the number of digits (order of the number)
    num_digits = len(digits)
    
    # Calculate the sum of each digit raised to the power of num_digits
    armstrong_sum = sum(int(digit) ** num_digits for digit in digits)
    
    # Check if the calculated sum equals the original number
    return number == armstrong_sum

# Input: Ask the user for a number
user_input = int(input("Enter a number to check if it's an Armstrong number: "))

# Check if the number is an Armstrong number and print the result
if is_armstrong(user_input):
    print(f"{user_input} is an Armstrong number.")
else:
    print(f"{user_input} is not an Armstrong number.")

--------------------------------------------------------------------------------------------------------------------------------------------

4. Python program to get the Fibonacci series between 0 to 50 

# Initialize the first two numbers of the Fibonacci series
a, b = 0, 1

# Print a message to indicate the range
print("Fibonacci series between 0 and 50:")

# Use a while loop to generate numbers in the Fibonacci series
while a <= 50:
    # Print the current number
    print(a, end=" ")
    
    # Update the values of a and b
    a, b = b, a + b
# End of program

----------------------------------------------------------------------------------------------------------------------------------------------
5. Python program to check the validity of password input by users

# Program to validate a password based on security rules

import re  # Import the regular expression module

# Function to validate password
def is_valid_password(password):
    # Check for minimum length of 8 characters
    if len(password) < 8:
        return "Password must be at least 8 characters long."
    
    # Check for at least one uppercase letter
    if not re.search(r"[A-Z]", password):
        return "Password must contain at least one uppercase letter."
    
    # Check for at least one lowercase letter
    if not re.search(r"[a-z]", password):
        return "Password must contain at least one lowercase letter."
    
    # Check for at least one digit
    if not re.search(r"[0-9]", password):
        return "Password must contain at least one digit."
    
    # Check for at least one special character
    if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        return "Password must contain at least one special character."
    
    # Check for spaces
    if re.search(r"\s", password):
        return "Password must not contain spaces."
    
    # If all checks pass
    return "Password is valid."

# Input: Ask the user to enter a password
user_password = input("Enter a password to validate: ")

# Validate the password and print the result
result = is_valid_password(user_password)
print(result)

-------------------------------------------------------------------------------------------------------------------------------------------------------




